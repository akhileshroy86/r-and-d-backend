generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      String    @default("admin")
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  @@map("admins")
}

model User {
  id          String           @id @default(cuid())
  email       String           @unique
  password    String
  role        UserRole
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  doctor      Doctor?
  patient     Patient?
  staff       Staff?
  preferences UserPreferences?

  @@map("users")
}

model UserPreferences {
  id            String  @id @default(cuid())
  userId        String  @unique
  language      String  @default("en")
  notifications Boolean @default(true)
  user          User    @relation(fields: [userId], references: [id])

  @@map("user_preferences")
}

model Hospital {
  id             String         @id @default(cuid())
  name           String
  address        String
  city           String?
  phone          String
  email          String?
  latitude       Float?
  longitude      Float?
  rating         Float          @default(0)
  totalReviews   Int            @default(0)
  status         HospitalStatus @default(OPEN)
  operatingHours Json?
  specialties    String[]       @default([])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  departments    Department[]
  doctors        Doctor[]
  reviews        Review[]

  @@map("hospitals")
}

model Department {
  id          String    @id @default(cuid())
  name        String
  hospitalId  String
  description String?
  hospital    Hospital  @relation(fields: [hospitalId], references: [id])
  doctors     Doctor[]
  symptoms    Symptom[]

  @@map("departments")
}

model Doctor {
  id              String          @id @default(cuid())
  userId          String          @unique
  firstName       String
  lastName        String
  qualification   String
  specialization  String
  experience      Int             @default(0)
  consultationFee Float           @default(0)
  rating          Float           @default(0)
  totalReviews    Int             @default(0)
  department      String
  departmentId    String?
  hospitalId      String?
  name            String
  appointments    Appointment[]
  schedule        DoctorSchedule?
  user            User            @relation(fields: [userId], references: [id])
  hospital        Hospital?       @relation(fields: [hospitalId], references: [id])
  departmentRef   Department?     @relation(fields: [departmentId], references: [id])
  queues          Queue[]
  reviews         Review[]

  @@map("doctors")
}

model DoctorSchedule {
  id                   String   @id @default(cuid())
  doctorId             String   @unique
  availableDays        String[]
  startTime            String
  endTime              String
  lunchBreakStart      String?
  lunchBreakEnd        String?
  consultationDuration Int      @default(30)
  maxPatientsPerDay    Int      @default(20)
  doctor               Doctor   @relation(fields: [doctorId], references: [id])

  @@map("doctor_schedules")
}

model Patient {
  id               String        @id @default(cuid())
  userId           String        @unique
  firstName        String
  lastName         String
  dateOfBirth      DateTime
  phone            String        @unique
  address          String?
  emergencyContact String?
  bloodGroup       String?
  allergies        String?
  appointments     Appointment[]
  user             User          @relation(fields: [userId], references: [id])
  queueEntries     QueueEntry[]
  reviews          Review[]

  @@map("patients")
}

model Staff {
  id       String  @id @default(cuid())
  userId   String  @unique
  fullName String
  email    String
  phone    String
  password String
  position String
  isActive Boolean @default(true)
  user     User    @relation(fields: [userId], references: [id])

  @@map("staff")
}

model Appointment {
  id           String            @id @default(cuid())
  patientId    String
  doctorId     String
  dateTime     DateTime
  timeRange    String?
  duration     Int               @default(30)
  status       AppointmentStatus @default(SCHEDULED)
  notes        String?
  symptoms     String?
  isWalkIn     Boolean           @default(false)
  followUpDate DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  doctor       Doctor            @relation(fields: [doctorId], references: [id])
  patient      Patient           @relation(fields: [patientId], references: [id])
  booking      Booking?

  @@map("appointments")
}

model Booking {
  id            String        @id @default(cuid())
  appointmentId String        @unique
  bookingId     String        @unique @default(cuid())
  timeRange     String
  status        BookingStatus @default(PENDING)
  canRejoin     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  payment       Payment?
  review        Review?

  @@map("bookings")
}

model Payment {
  id                String        @id @default(cuid())
  bookingId         String        @unique
  amount            Float
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  method            PaymentMethod @default(ONLINE)
  razorpayOrderId   String?       @unique
  razorpayPaymentId String?
  razorpaySignature String?
  paidAt            DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  booking           Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Review {
  id          String    @id @default(cuid())
  patientId   String
  doctorId    String?
  hospitalId  String?
  bookingId   String?   @unique
  rating      Int
  comment     String?
  isAnonymous Boolean   @default(false)
  createdAt   DateTime  @default(now())
  booking     Booking?  @relation(fields: [bookingId], references: [id])
  doctor      Doctor?   @relation(fields: [doctorId], references: [id])
  hospital    Hospital? @relation(fields: [hospitalId], references: [id])
  patient     Patient   @relation(fields: [patientId], references: [id])

  @@map("reviews")
}

model Queue {
  id                String       @id @default(cuid())
  doctorId          String
  date              DateTime
  currentPosition   Int          @default(0)
  estimatedWaitTime Int          @default(0)
  entries           QueueEntry[]
  doctor            Doctor       @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, date])
  @@map("queues")
}

model QueueEntry {
  id        String      @id @default(cuid())
  queueId   String
  patientId String
  position  Int
  status    QueueStatus @default(WAITING)
  joinedAt  DateTime    @default(now())
  calledAt  DateTime?
  patient   Patient     @relation(fields: [patientId], references: [id])
  queue     Queue       @relation(fields: [queueId], references: [id])

  @@map("queue_entries")
}

model Symptom {
  id           String     @id @default(cuid())
  name         String
  departmentId String
  keywords     String[]
  department   Department @relation(fields: [departmentId], references: [id])

  @@map("symptoms")
}

enum UserRole {
  ADMIN
  DOCTOR
  PATIENT
  STAFF
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  ONLINE
  OFFLINE
  UPI
}

enum HospitalStatus {
  OPEN
  CLOSED
  MAINTENANCE
}

enum QueueStatus {
  WAITING
  CALLED
  IN_CONSULTATION
  COMPLETED
  CANCELLED
}
